<UserControl x:Class="XamlGenerationTests.Shared.CustomMarkupExtensions"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:local="using:XamlGenerationTests.Shared.MarkupExtensions"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:ext="clr-namespace:XamlGenerationTests.Shared.MarkupExtensions"
			 mc:Ignorable="d">

	<UserControl.Resources>
		<ext:InverseBoolMarkup x:Key="Inverse" />

		<ext:TestObject x:Name="TestObject" />

		<x:String x:Key="ResourceTest">Resource String</x:String>

		<!-- Make sure x:DataType generates correctly -->
		<DataTemplate x:Key="TestDataTemplate"
					  x:DataType="local:ComplexObject">
			<StackPanel Orientation="Horizontal"
						Spacing="8">
				<!-- Make sure x:Bind generates correctly -->
				<TextBlock Text="{x:Bind StringProp, Mode=OneWay}" />
				<TextBlock Text="{x:Bind IntProp, Mode=OneWay}" />

				<!-- Make a markup extension inside a DataTemplate generates correctly -->
				<TextBlock Text="{ext:TestMarkup String1='TemplateString1', String2={StaticResource ResourceTest}, Number=999}" />
			</StackPanel>
		</DataTemplate>
	</UserControl.Resources>

	<!-- Make sure x:Name generates correctly -->
	<Grid x:Name="RootGrid"
		  IsRightTapEnabled="False"
		  Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
		<StackPanel>
			<!-- Make sure x:Null generates correctly -->
			<!-- Make an attached behavior generates correctly -->
			<Border Background="{x:Null}">
				<TextBlock Text="{ext:TestMarkup String1='1st', String2={StaticResource ResourceTest}, Number=55}"
						   ext:AttachedTest.IsAttached="True" />
			</Border>

			<!-- Make regular markup extension converters generate correctly -->
			<TextBlock Text="{Binding IsRightTapEnabled, Converter={ext:InverseBoolMarkup}, ElementName=RootGrid}" />

			<!-- Make sure regular bindings and regular converters still generate correctly -->
			<TextBlock Text="{Binding IsRightTapEnabled, Converter={StaticResource Inverse}, ElementName=RootGrid}" />

			<ContentPresenter Content="{ext:ComplexMarkup String='MyString', Number=100}"
							  ContentTemplate="{StaticResource TestDataTemplate}" />

			<!-- Make sure markup extension works in an attached property -->
			<TextBlock ext:MarkupExtensionTestBehavior.CustomText="{ext:TestMarkup String1='Just a test string...'}" />

			<!-- Make sure markup extension works in an attached property using a binding and converter -->
			<TextBlock ext:MarkupExtensionTestBehavior.CustomText="{Binding IsRightTapEnabled, ElementName=RootGrid, Converter={ext:InverseBoolMarkup}}" />

			<!-- Make sure a markup extension can return different types -->
			<TextBlock Text="{ext:NoReturnTypeMarkupExt UseValue=UseValue1, Value1='I am Value 1', Value2=444}"
					   Tag="{ext:NoReturnTypeMarkupExt UseValue=UseValue2, Value1='I am Value 1', Value2=333}" />

			<!-- Make sure custom objects can be returned from a markup extension without a return type specified -->
			<TextBlock DataContext="{ext:NoReturnTypeMarkupExt UseValue=UseValue1, Value1={StaticResource TestObject}}" />

			<!--XAML markup extension without Suffix Extension-->
			<TextBlock Text="{ext:TestMarkupSuffix}"/>

			<!--XAML markup extension without Suffix Extension work on binding-->
			<TextBlock Text="{Binding IsRightTapEnabled,  Converter={ext:TestMarkupSuffix}}"/>

			<!-- XAML markup extension without Suffix Extension work on bindin an attached property using a binding and converter -->
			<TextBlock ext:MarkupExtensionTestBehavior.CustomText="{Binding IsRightTapEnabled, ElementName=RootGrid, Converter={ext:TestMarkupSuffix}}" />


		</StackPanel>
	</Grid>
</UserControl>
