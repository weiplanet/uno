<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Collections.Generic;
using Uno.Disposables;
using System.Runtime.CompilerServices;
using Uno.Extensions;
using Uno.UI.DataBinding;
using Uno.Logging;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Media.Animation;

#if __ANDROID__
using Android.Views;
#elif __IOS__
using UIKit;
#endif

<# 
	foreach(var mixin in _mixins) { 
#>

namespace <#= mixin.NamespaceName #>
{
	public partial class <#= mixin.ClassName #>
	{
#if <#= mixin.HasCommonStates #>
		private const string __normalState = "Normal";
		private const string __disabledState = "Disabled";

#if <#= mixin.HasCommonPressedState #>
		private const string __pressedState = "Pressed";
#endif
#if <#= mixin.HasCommonOverState #>
		private const string __pointerOverState = "PointerOver";
#endif

#if <#= mixin.HasCommonFocusedState #>
		private const string __focusedState = "Focused";
#endif
#endif

#if <#= mixin.HasCheckedStates #> || <#= mixin.HasCombinedCheckedState #> || <#= mixin.HasCommonCheckedState #>
		private const string __indeterminateState = "Indeterminate";
		private const string __checkedState = "Checked";
		private const string __uncheckedState = "Unchecked";
#endif

#if <#= mixin.HasCommonStates #> || <#= mixin.HasCheckedStates #>
#if <#= (mixin.ClassName != "Button").ToString().ToLowerInvariant() #>
		static <#= mixin.ClassName #>()
		{
			StaticInitializeVisualStates();
		}
#endif

		/// <summary>
		/// This method must be called from the static constructor in the non-generated part of the class in order to register visual state changes.
		/// </summary>
		private static void StaticInitializeVisualStates()
		{
			var type = typeof(<#= mixin.ClassName #>);

			IsEnabledProperty.GetMetadata(type).MergePropertyChangedCallback(OnPropertyChangedUpdateCommonStates);
#if <#= mixin.HasCommonFocusedState #>
			FocusStateProperty.GetMetadata(type).MergePropertyChangedCallback(OnPropertyChangedUpdateCommonStates);
#endif
#if <#= mixin.HasCommonCheckedState #> || <#= mixin.HasCombinedCheckedState #>
			IsCheckedProperty.GetMetadata(type).MergePropertyChangedCallback(OnPropertyChangedUpdateCommonStates);
#elif <#= mixin.HasCheckedStates #>
			IsCheckedProperty.GetMetadata(type).MergePropertyChangedCallback(OnPropertyChangedUpdateCheckedStates);
#endif
		}
#endif

		/// <summary>
		/// This method must be called from the constructor in the non-generated part of the class in order to register visual state changes.
		/// </summary>
		private void InitializeVisualStates()
		{
			Loaded += OnRoutedEventUpdateAllStates;

#if <#= mixin.HasCommonOverState #>
			InsertHandler(PointerEnteredEvent, OnPointerEventUpdateCommonStates, handledEventsToo: false);
			InsertHandler(PointerExitedEvent, OnPointerEventUpdateCommonStates, handledEventsToo: false);
#endif
#if <#= mixin.HasCommonPressedState #> 
			InsertHandler(PointerPressedEvent, OnPointerEventUpdateCommonStates, handledEventsToo: false);
			InsertHandler(PointerReleasedEvent, OnPointerEventUpdateCommonStates, handledEventsToo: false);
#endif
#if <#= mixin.HasCommonPressedState #> || <#= mixin.HasCommonOverState #>
			InsertHandler(PointerCanceledEvent, OnPointerEventUpdateCommonStates, handledEventsToo: false);
			InsertHandler(PointerCaptureLostEvent, OnPointerEventUpdateCommonStates, handledEventsToo: false);
#endif

			UpdateAllStates();
		}

		private static readonly RoutedEventHandler OnRoutedEventUpdateAllStates = (snd, e) =>
		{
			if (snd is <#= mixin.ClassName #> elt)
			{
				elt.UpdateAllStates();
			}
		};
#if <#= mixin.HasCommonStates #>
		private static readonly PointerEventHandler OnPointerEventUpdateCommonStates = (snd, e) =>
		{
			if (snd is <#= mixin.ClassName #> elt)
			{
				elt.UpdateCommonStates(true);
			}
		};
		private static readonly PropertyChangedCallback OnPropertyChangedUpdateCommonStates = (snd, e) =>
		{
			if (snd is <#= mixin.ClassName #> elt)
			{
				elt.UpdateCommonStates(true);
			}
		};
#endif
#if <#= mixin.HasCheckedStates #>
		private static readonly PropertyChangedCallback OnPropertyChangedUpdateCheckedStates = (snd, e) =>
		{
			if (snd is <#= mixin.ClassName #> elt)
			{
				elt.UpdateCheckedStates(true);
			}
		};
#endif

		private void UpdateAllStates()
		{
#if <#= mixin.HasCommonStates #>
			UpdateCommonStates(false);
#endif
#if <#= mixin.HasCheckedStates #>
			UpdateCheckedStates(false);
#endif
		}

#if <#= mixin.HasCommonStates #>
		private void UpdateCommonStates(bool useTransitions)
		{
#if <#= mixin.HasCommonCheckedState #> || <#= mixin.HasCombinedCheckedState #>
			var state = GetFullState();
#else
			var state = GetCommonState();
#endif
			VisualStateManager.GoToState(this, state, useTransitions);

#if <#= mixin.HasCheckedStates #> && !<#= mixin.HasCommonCheckedState #> && !<#= mixin.HasCombinedCheckedState #> // HasCheckedStates && !HasCommonCheckedState && !HasCombinedCheckedState
			// Reapply checked state after changing common states. This is a no-op under the default style where pressed states and checked
			// states are in different VisualStateGroups, and follows UWP in the non-standard case that they are in the same group (Checked/Unchecked is always reapplied last)
			UpdateCheckedStates(useTransitions);
#endif
		}
#endif

#if <#= mixin.HasCheckedStates #>
		private void UpdateCheckedStates(bool useTransitions)
		{
			var state = GetCheckedState();

			VisualStateManager.GoToState(this, state, useTransitions);
		}
#endif

#if <#= mixin.HasCommonCheckedState #> || <#= mixin.HasCombinedCheckedState #>
		private string GetFullState()
		{
			var commonState = GetCommonState();
			var checkedState = GetCheckedState();

#if <#= mixin.HasCommonCheckedState #>
			if (checkedState == __uncheckedState)
			{
				return commonState;
			}
			else if (commonState == __normalState)
			{
				return checkedState;
			}
#endif
			return checkedState + commonState;
		}
#endif

		private string GetCommonState()
		{
			if (!IsEnabled)
			{
				return __disabledState;
			}
#if <#= mixin.HasCommonPressedState #>
			else if (IsPointerPressed && IsPointerOver)
			{
				return __pressedState;
			}
#endif
#if <#= mixin.HasCommonFocusedState #>
			else if (FocusState != FocusState.Unfocused)
			{
				return __focusedState;
			}
#endif
#if <#= mixin.HasCommonOverState #>
			else if (IsPointerOver)
			{
				return __pointerOverState;
			}
#endif
			else
			{
				return __normalState;
			}
		}

#if <#= mixin.HasCheckedStates #> || <#= mixin.HasCommonCheckedState #> || <#= mixin.HasCombinedCheckedState #>
		private string GetCheckedState()
		{
			if (this.IsChecked == null)
			{
				return __indeterminateState;
			}
			else if (this.IsChecked.Value)
			{
				return __checkedState;
			}
			else
			{
				return __uncheckedState;
			}
		}
#endif
	}
}
<#
 } 
#>

<#+
	public void AddClass(
		string namespaceName, 
		string className, 
		bool hasCommonStates = false,
		bool hasCommonOverState = false,
		bool hasCommonPressedState = false,
		bool hasCommonFocusedState = false,
		bool hasCommonCheckedState = false,
		bool hasCombinedCheckedState = false,
		bool hasCheckedStates = false
	)
	{
		_mixins.Add(
			new MixinParams { 
				NamespaceName = namespaceName, 
				ClassName = className,
				HasCommonStates = hasCommonStates ? "true" : "false",
				HasCommonOverState = hasCommonOverState ? "true" : "false",
				HasCommonPressedState = hasCommonPressedState ? "true" : "false",
				HasCommonFocusedState = hasCommonFocusedState ? "true" : "false",
				HasCommonCheckedState = hasCommonCheckedState ? "true" : "false",
				HasCombinedCheckedState = hasCombinedCheckedState ? "true" : "false",
				HasCheckedStates = hasCheckedStates ? "true" : "false"
			}
		);
	}

	private class MixinParams
	{
		public string NamespaceName;
		public string ClassName;
		//The class has the 'CommonStates' visual group
		public string HasCommonStates;
		public string HasCommonOverState;
		public string HasCommonPressedState;
		public string HasCommonFocusedState;
		//The control has checked states included within the 'CommonStates' visual group
		public string HasCommonCheckedState;
		//The control has checked states included within the 'CombinedStates' visual group, with a naming convention to explicitly specify the default (eg 'UncheckedNormal' instead of 'Normal').
		public string HasCombinedCheckedState;
		//The control has a 'CheckStates' visual group
		public string HasCheckedStates;
	}

	private List<MixinParams> _mixins = new List<MixinParams>();
#>
